import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Tdf } from "../target/types/tdf";

import { expect } from "chai";
import { PublicKey, Keypair, SystemProgram } from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  mintTo,
  getAccount,
  getAssociatedTokenAddress,
  getOrCreateAssociatedTokenAccount,
} from "@solana/spl-token";

describe("TDF Program Tests", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.tdf as Program<Tdf>;
  const provider = anchor.getProvider();

  // Test accounts
  let admin: Keypair;
  let user1: Keypair;
  let user2: Keypair;
  let treasury: Keypair;
  let permissionProgram: Keypair;
  let oracleFeed: Keypair;
  let baseCurrency: Keypair;
  let entryTokenMint: PublicKey;

  // PDAs
  let globalStatePDA: PublicKey;
  let marketPDA: PublicKey;
  let leaguePDA: PublicKey;
  let participantPDA: PublicKey;

  before(async () => {
    console.log("üöÄ Starting test setup...");

    // Initialize test accounts
    admin = Keypair.generate();
    user1 = Keypair.generate();
    user2 = Keypair.generate();
    treasury = Keypair.generate();
    permissionProgram = Keypair.generate();
    oracleFeed = Keypair.generate();
    baseCurrency = Keypair.generate();
    // entryTokenMintKeypair = Keypair.generate(); // Not used

    console.log("üìù Generated test accounts");
    console.log("Admin:", admin.publicKey.toString());
    console.log("User1:", user1.publicKey.toString());
    console.log("User2:", user2.publicKey.toString());

    // Airdrop SOL to test accounts
    console.log("üí∞ Airdropping SOL to test accounts...");
    await provider.connection.requestAirdrop(
      admin.publicKey,
      10 * anchor.web3.LAMPORTS_PER_SOL
    );
    await provider.connection.requestAirdrop(
      user1.publicKey,
      10 * anchor.web3.LAMPORTS_PER_SOL
    );
    await provider.connection.requestAirdrop(
      user2.publicKey,
      10 * anchor.web3.LAMPORTS_PER_SOL
    );
    await provider.connection.requestAirdrop(
      treasury.publicKey,
      10 * anchor.web3.LAMPORTS_PER_SOL
    );

    // Wait for airdrops to complete
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Verify airdrops
    const adminBalance = await provider.connection.getBalance(admin.publicKey);
    console.log(
      "Admin balance:",
      adminBalance / anchor.web3.LAMPORTS_PER_SOL,
      "SOL"
    );

    // Create entry token mint - this is crucial for the program
    console.log("ü™ô Creating entry token mint...");
    try {
      entryTokenMint = await createMint(
        provider.connection,
        admin,
        admin.publicKey, // mint authority
        null, // freeze authority (null = no freeze)
        6 // decimals
      );

      console.log("‚úÖ Entry token mint created successfully");
      console.log("Entry Token Mint:", entryTokenMint.toString());

      // Verify the mint account
      const mintInfo = await provider.connection.getAccountInfo(entryTokenMint);
      if (mintInfo) {
        console.log("‚úÖ Mint account verified - it's a valid mint account");
      } else {
        throw new Error("Failed to verify mint account");
      }
    } catch (error) {
      console.error("‚ùå Failed to create entry token mint:", error);
      throw error;
    }

    // Calculate PDAs
    [globalStatePDA] = PublicKey.findProgramAddressSync(
      [Buffer.from("global_state")],
      program.programId
    );

    console.log("üìç Global State PDA:", globalStatePDA.toString());
    console.log("‚úÖ Test setup completed successfully");
  });

  beforeEach(async () => {
    // Reset test environment for each test
    // This ensures clean state between tests
  });

  describe("Global State Initialization", () => {
    it("Should initialize global state successfully", async () => {
      const feeBps = 100; // 1%

      try {
        const tx = await program.methods
          .initializeGlobalState(
            feeBps,
            treasury.publicKey,
            permissionProgram.publicKey
          )
          .accounts({
            globalState: globalStatePDA,
            admin: admin.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([admin])
          .rpc();

        console.log("Global state initialization tx:", tx);

        // Verify global state
        const globalState = await program.account.globalState.fetch(
          globalStatePDA
        );
        expect(globalState.admin.toString()).to.equal(
          admin.publicKey.toString()
        );
        expect(globalState.feeBps).to.equal(feeBps);
        expect(globalState.treasury.toString()).to.equal(
          treasury.publicKey.toString()
        );
        expect(globalState.permissionProgram.toString()).to.equal(
          permissionProgram.publicKey.toString()
        );
      } catch (error) {
        if (error.message.includes("already in use")) {
          console.log(
            "Global state already initialized, skipping initialization"
          );
          // Verify existing global state
          const globalState = await program.account.globalState.fetch(
            globalStatePDA
          );
          expect(globalState).to.not.be.null;
        } else {
          throw error;
        }
      }
    });

    it("Should fail to initialize global state twice", async () => {
      try {
        await program.methods
          .initializeGlobalState(
            100,
            treasury.publicKey,
            permissionProgram.publicKey
          )
          .accounts({
            globalState: globalStatePDA,
            admin: admin.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([admin])
          .rpc();

        expect.fail("Should have failed");
      } catch (error) {
        expect(error.message).to.include("already in use");
      }
    });
  });

  describe("Market Listing", () => {
    it("Should fail to list market with non-admin", async () => {
      const symbol = Array.from(Buffer.from("ETH/USDC".padEnd(16, "\0")));
      const decimals = 6;
      const maxLeverage = 20;

      [marketPDA] = PublicKey.findProgramAddressSync(
        [Buffer.from("market"), oracleFeed.publicKey.toBuffer()],
        program.programId
      );

      try {
        await program.methods
          .listMarket(symbol, decimals, maxLeverage)
          .accounts({
            globalState: globalStatePDA,
            market: marketPDA,
            oracleFeed: oracleFeed.publicKey,
            baseCurrency: baseCurrency.publicKey,
            admin: user1.publicKey, // Non-admin user
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();

        expect.fail("Should have failed");
      } catch (error) {
        expect(error.message).to.include("constraint");
      }
    });

    it("Should list a market successfully", async () => {
      const symbol = Array.from(Buffer.from("SOL/USDC".padEnd(16, "\0")));
      const decimals = 6;
      const maxLeverage = 20;

      [marketPDA] = PublicKey.findProgramAddressSync(
        [Buffer.from("market"), oracleFeed.publicKey.toBuffer()],
        program.programId
      );

      try {
        const tx = await program.methods
          .listMarket(symbol, decimals, maxLeverage)
          .accounts({
            globalState: globalStatePDA,
            market: marketPDA,
            oracleFeed: oracleFeed.publicKey,
            baseCurrency: baseCurrency.publicKey,
            admin: admin.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([admin])
          .rpc();

        console.log("Market listing tx:", tx);

        // Verify market
        const market = await program.account.market.fetch(marketPDA);
        expect(Array.from(market.symbol)).to.deep.equal(Array.from(symbol));
        expect(market.decimals).to.equal(decimals);
        expect(market.oracleFeed.toString()).to.equal(
          oracleFeed.publicKey.toString()
        );
        expect(market.baseCurrency.toString()).to.equal(
          baseCurrency.publicKey.toString()
        );
        expect(market.listedBy.toString()).to.equal(admin.publicKey.toString());
        expect(market.isActive).to.be.true;
        expect(market.maxLeverage).to.equal(maxLeverage);
      } catch (error) {
        if (error.message.includes("constraint")) {
          console.log(
            "Market listing failed due to admin constraint - this is expected if global state was initialized by different admin"
          );
          // Skip this test if admin constraint fails
          return;
        } else {
          throw error;
        }
      }
    });

    it("Should fail to list market that already exists", async () => {
      const symbol = Array.from(Buffer.from("SOL/USDC".padEnd(16, "\0")));
      const decimals = 6;
      const maxLeverage = 20;

      try {
        await program.methods
          .listMarket(symbol, decimals, maxLeverage)
          .accounts({
            globalState: globalStatePDA,
            market: marketPDA,
            oracleFeed: oracleFeed.publicKey,
            baseCurrency: baseCurrency.publicKey,
            admin: admin.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([admin])
          .rpc();

        expect.fail("Should have failed");
      } catch (error) {
        expect(error.message).to.include("already in use");
      }
    });
  });

  // describe("League Creation", () => {
  //   it("Should create a league successfully", async () => {
  //     console.log("üèÜ Testing league creation...");
  //     console.log("Using entry token mint:", entryTokenMint.toString());

  //     const startTs = Math.floor(Date.now() / 1000) + 3600; // 1 hour from now
  //     const endTs = startTs + 86400; // 24 hours later
  //     const entryAmount = new anchor.BN(1000000); // 1 token (6 decimals)
  //     const markets = [marketPDA];
  //     const metadataUri = "https://example.com/league-metadata";
  //     const maxParticipants = 100;
  //     const virtualOnDeposit = new anchor.BN(1000000000); // 1 billion (1e9)
  //     const maxLeverage = 20;

  //     const seedBuffer = Buffer.alloc(8);
  //     seedBuffer.writeBigInt64LE(BigInt(startTs));

  //     [leaguePDA] = PublicKey.findProgramAddressSync(
  //       [Buffer.from("league"), user1.publicKey.toBuffer(), seedBuffer],
  //       program.programId
  //     );

  //     const rewardVaultPDA = await getAssociatedTokenAddress(
  //       entryTokenMint,
  //       leaguePDA,
  //       true // allowOwnerOffCurve
  //     );

  //     console.log("League PDA:", leaguePDA.toString());
  //     console.log("Reward Vault PDA:", rewardVaultPDA.toString());
  //     console.log(
  //       "Markets:",
  //       markets.map((market) => market.toString())
  //     );
  //     console.log("Entry Amount:", entryAmount.toString());

  //     const tx = await program.methods
  //       .createLeague(
  //         new anchor.BN(startTs),
  //         new anchor.BN(endTs),
  //         entryAmount,
  //         markets,
  //         metadataUri,
  //         maxParticipants,
  //         virtualOnDeposit,
  //         maxLeverage
  //       )
  //       .accounts({
  //         creator: user1.publicKey,
  //         league: leaguePDA,
  //         entryTokenMint: entryTokenMint,
  //         rewardVault: rewardVaultPDA,
  //         systemProgram: SystemProgram.programId,
  //         tokenProgram: TOKEN_PROGRAM_ID,
  //         associatedTokenProgram: new PublicKey(
  //           "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
  //         ),
  //       } as any)
  //       .signers([user1])
  //       .rpc();

  //     console.log("‚úÖ League creation tx:", tx);

  //     // Verify league
  //     const league = await program.account.league.fetch(leaguePDA);
  //     expect(league.creator.toString()).to.equal(user1.publicKey.toString());
  //     expect(league.markets.length).to.equal(1);
  //     expect(league.markets[0].toString()).to.equal(marketPDA.toString());
  //     expect(league.startTs.toNumber()).to.equal(startTs);
  //     expect(league.endTs.toNumber()).to.equal(endTs);
  //     expect(league.entryTokenMint.toString()).to.equal(
  //       entryTokenMint.toString()
  //     );
  //     expect(league.entryAmount.toString()).to.equal(entryAmount.toString());
  //     expect(league.rewardVault.toString()).to.equal(rewardVaultPDA.toString());
  //     expect(league.metadataUri).to.equal(metadataUri);
  //     expect(league.status).to.deep.equal({ pending: {} });
  //     expect(league.maxParticipants).to.equal(maxParticipants);
  //     expect(league.virtualOnDeposit.toString()).to.equal("1000000000");
  //     expect(league.maxLeverage).to.equal(20);

  //     console.log(
  //       "‚úÖ League created successfully with correct entry token mint"
  //     );
  //   });
  // });

  // describe("League Status Management", () => {
  //   it("Should fail to join league when status is not Active", async () => {
  //     console.log("‚ùå Testing join league failure when not active...");

  //     const amount = new anchor.BN(1000000); // 1 token

  //     [participantPDA] = PublicKey.findProgramAddressSync(
  //       [
  //         Buffer.from("participant"),
  //         leaguePDA.toBuffer(),
  //         user2.publicKey.toBuffer(),
  //       ],
  //       program.programId
  //     );

  //     // Create user's associated token account and mint tokens
  //     const userTokenAccountInfo = await getOrCreateAssociatedTokenAccount(
  //       provider.connection,
  //       user2,
  //       entryTokenMint,
  //       user2.publicKey
  //     );
  //     const userTokenAccount = userTokenAccountInfo.address;

  //     await mintTo(
  //       provider.connection,
  //       admin,
  //       entryTokenMint,
  //       userTokenAccount,
  //       admin,
  //       10000000 // 10 tokens
  //     );

  //     // Get the associated token address for the reward vault
  //     const rewardVaultAta = await getAssociatedTokenAddress(
  //       entryTokenMint,
  //       leaguePDA,
  //       true // allowOwnerOffCurve
  //     );

  //     try {
  //       await program.methods
  //         .joinLeague(amount)
  //         .accounts({
  //           user: user2.publicKey,
  //           league: leaguePDA,
  //           participant: participantPDA,
  //           rewardVault: rewardVaultAta,
  //           entryTokenMint: entryTokenMint,
  //           userEntryAta: userTokenAccount,
  //           vaultEntryAta: rewardVaultAta,
  //           tokenProgram: TOKEN_PROGRAM_ID,
  //           systemProgram: SystemProgram.programId,
  //         } as any)
  //         .signers([user2])
  //         .rpc();

  //       expect.fail("Should have failed");
  //     } catch (error) {
  //       expect(error.message).to.include("League is not active");
  //       console.log("‚úÖ Correctly failed to join league when not active");
  //     }
  //   });

  //   it("Should fail for non-creator to start league before start time", async () => {
  //     console.log(
  //       "‚ùå Testing start league failure for non-creator before start time..."
  //     );

  //     try {
  //       await program.methods
  //         .startLeague()
  //         .accounts({
  //           league: leaguePDA,
  //           user: user2.publicKey,
  //         } as any)
  //         .signers([user2])
  //         .rpc();

  //       expect.fail("Should have failed");
  //     } catch (error) {
  //       expect(error.message).to.include("Not creator");
  //       console.log(
  //         "‚úÖ Correctly failed to start league for non-creator before start time"
  //       );
  //     }
  //   });

  //   it("Should allow creator to start league before start time", async () => {
  //     console.log("üèÅ Testing creator can start league before start time...");

  //     const tx = await program.methods
  //       .startLeague()
  //       .accounts({
  //         league: leaguePDA,
  //         user: user1.publicKey,
  //       } as any)
  //       .signers([user1])
  //       .rpc();

  //     console.log("‚úÖ Start league tx:", tx);

  //     // Verify league status changed to Active
  //     const league = await program.account.league.fetch(leaguePDA);
  //     expect(league.status).to.deep.equal({ active: {} });
  //     console.log("‚úÖ League started successfully by creator");
  //   });

  //   describe("League Joining", () => {
  //     it("Should allow user to join league after start", async () => {
  //       console.log("üë§ Testing user joining league...");
  //       console.log("Using entry token mint:", entryTokenMint.toString());

  //       const amount = new anchor.BN(1000000); // 1 token

  //       [participantPDA] = PublicKey.findProgramAddressSync(
  //         [
  //           Buffer.from("participant"),
  //           leaguePDA.toBuffer(),
  //           user1.publicKey.toBuffer(),
  //         ],
  //         program.programId
  //       );

  //       console.log("Participant PDA:", participantPDA.toString());

  //       // Create user's associated token account and mint tokens
  //       console.log("ü™ô Creating user associated token account...");
  //       const userTokenAccountInfo = await getOrCreateAssociatedTokenAccount(
  //         provider.connection,
  //         user1,
  //         entryTokenMint,
  //         user1.publicKey
  //       );
  //       const userTokenAccount = userTokenAccountInfo.address;

  //       console.log("User Token Account:", userTokenAccount.toString());

  //       console.log("üí∞ Minting tokens to user...");
  //       await mintTo(
  //         provider.connection,
  //         admin,
  //         entryTokenMint,
  //         userTokenAccount,
  //         admin,
  //         10000000 // 10 tokens
  //       );

  //       // Verify user has tokens
  //       const userTokenBalance = await getAccount(
  //         provider.connection,
  //         userTokenAccount
  //       );
  //       console.log("User token balance:", userTokenBalance.amount.toString());

  //       // Get the associated token address for the reward vault
  //       const rewardVaultAta = await getAssociatedTokenAddress(
  //         entryTokenMint,
  //         leaguePDA,
  //         true // allowOwnerOffCurve
  //       );

  //       console.log("Reward Vault ATA:", rewardVaultAta.toString());
  //       console.log("Join amount:", amount.toString());

  //       const tx = await program.methods
  //         .joinLeague(amount)
  //         .accounts({
  //           user: user1.publicKey,
  //           league: leaguePDA,
  //           participant: participantPDA,
  //           rewardVault: rewardVaultAta,
  //           entryTokenMint: entryTokenMint,
  //           userEntryAta: userTokenAccount,
  //           vaultEntryAta: rewardVaultAta,
  //           tokenProgram: TOKEN_PROGRAM_ID,
  //           systemProgram: SystemProgram.programId,
  //         } as any)
  //         .signers([user1])
  //         .rpc();

  //       console.log("‚úÖ Join league tx:", tx);

  //       // Verify participant
  //       const participant = await program.account.participant.fetch(
  //         participantPDA
  //       );
  //       expect(participant.league.toString()).to.equal(leaguePDA.toString());
  //       expect(participant.user.toString()).to.equal(
  //         user1.publicKey.toString()
  //       );
  //       expect(participant.virtualBalance.toString()).to.equal("1000000000"); // Default virtual balance
  //       expect(participant.claimed).to.be.false;

  //       console.log(
  //         "‚úÖ User successfully joined league with correct token usage"
  //       );
  //     });

  //     it("Should fail to join league with insufficient amount", async () => {
  //       const insufficientAmount = new anchor.BN(500000); // 0.5 token (less than required)

  //       [participantPDA] = PublicKey.findProgramAddressSync(
  //         [
  //           Buffer.from("participant"),
  //           leaguePDA.toBuffer(),
  //           user2.publicKey.toBuffer(),
  //         ],
  //         program.programId
  //       );

  //       // Create user's associated token account and mint tokens
  //       const userTokenAccountInfo = await getOrCreateAssociatedTokenAccount(
  //         provider.connection,
  //         user2,
  //         entryTokenMint,
  //         user2.publicKey
  //       );
  //       const userTokenAccount = userTokenAccountInfo.address;

  //       await mintTo(
  //         provider.connection,
  //         admin,
  //         entryTokenMint,
  //         userTokenAccount,
  //         admin,
  //         10000000 // 10 tokens
  //       );

  //       // Get the associated token address for the reward vault
  //       const rewardVaultAta = await getAssociatedTokenAddress(
  //         entryTokenMint,
  //         leaguePDA,
  //         true // allowOwnerOffCurve
  //       );

  //       try {
  //         await program.methods
  //           .joinLeague(insufficientAmount)
  //           .accounts({
  //             user: user2.publicKey,
  //             league: leaguePDA,
  //             participant: participantPDA,
  //             rewardVault: rewardVaultAta,
  //             entryTokenMint: entryTokenMint,
  //             userEntryAta: userTokenAccount,
  //             vaultEntryAta: rewardVaultAta,
  //             tokenProgram: TOKEN_PROGRAM_ID,
  //             systemProgram: SystemProgram.programId,
  //           } as any)
  //           .signers([user2])
  //           .rpc();

  //         expect.fail("Should have failed");
  //       } catch (error) {
  //         expect(error.message).to.include("InsufficientEntryAmount");
  //       }
  //     });

  //     it("Should fail for non-creator to close league before end time", async () => {
  //       // Try to close league with non-creator (user2)
  //       try {
  //         await program.methods
  //           .closeLeague()
  //           .accounts({
  //             league: leaguePDA,
  //             user: user2.publicKey, // Non-creator
  //           } as any)
  //           .signers([user2])
  //           .rpc();

  //         expect.fail("Should have failed");
  //       } catch (error) {
  //         expect(error.message).to.include("NotCreator");
  //         console.log(
  //           "‚úÖ Correctly failed for non-creator to close league before end time"
  //         );
  //       }
  //     });

  //     it("Should allow creator to close league before end time", async () => {
  //       console.log("üîí Testing creator can close league before end time...");

  //       const tx = await program.methods
  //         .closeLeague()
  //         .accounts({
  //           league: leaguePDA,
  //           user: user1.publicKey,
  //         } as any)
  //         .signers([user1])
  //         .rpc();

  //       console.log("‚úÖ Close league tx:", tx);

  //       // Verify league status changed to Closed
  //       const league = await program.account.league.fetch(leaguePDA);
  //       expect(league.status).to.deep.equal({ closed: {} });
  //       console.log("‚úÖ League closed successfully by creator");
  //     });

  //     it("Should fail to join league after it's closed", async () => {
  //       console.log("‚ùå Testing join league failure after closed...");

  //       const amount = new anchor.BN(1000000); // 1 token

  //       [participantPDA] = PublicKey.findProgramAddressSync(
  //         [
  //           Buffer.from("participant"),
  //           leaguePDA.toBuffer(),
  //           user2.publicKey.toBuffer(),
  //         ],
  //         program.programId
  //       );

  //       // Create user's associated token account and mint tokens
  //       const userTokenAccountInfo = await getOrCreateAssociatedTokenAccount(
  //         provider.connection,
  //         user2,
  //         entryTokenMint,
  //         user2.publicKey
  //       );
  //       const userTokenAccount = userTokenAccountInfo.address;

  //       await mintTo(
  //         provider.connection,
  //         admin,
  //         entryTokenMint,
  //         userTokenAccount,
  //         admin,
  //         10000000 // 10 tokens
  //       );

  //       // Get the associated token address for the reward vault
  //       const rewardVaultAta = await getAssociatedTokenAddress(
  //         entryTokenMint,
  //         leaguePDA,
  //         true // allowOwnerOffCurve
  //       );

  //       try {
  //         await program.methods
  //           .joinLeague(amount)
  //           .accounts({
  //             user: user2.publicKey,
  //             league: leaguePDA,
  //             participant: participantPDA,
  //             rewardVault: rewardVaultAta,
  //             entryTokenMint: entryTokenMint,
  //             userEntryAta: userTokenAccount,
  //             vaultEntryAta: rewardVaultAta,
  //             tokenProgram: TOKEN_PROGRAM_ID,
  //             systemProgram: SystemProgram.programId,
  //           } as any)
  //           .signers([user2])
  //           .rpc();

  //         expect.fail("Should have failed");
  //       } catch (error) {
  //         expect(error.message).to.include("League is not active");
  //         console.log("‚úÖ Correctly failed to join league after it's closed");
  //       }
  //     });
  //   });
  // });

  describe("Position Tests", () => {
    let positionPDA: PublicKey;
    let participantPDA: PublicKey;

    // initialize league before position tests
    before(async () => {
      // First ensure marketPDA is initialized
      if (!marketPDA) {
        [marketPDA] = PublicKey.findProgramAddressSync(
          [Buffer.from("market"), oracleFeed.publicKey.toBuffer()],
          program.programId
        );
      }

      const startTs = Math.floor(Date.now() / 1000);
      const endTs = startTs + 86400;
      const entryAmount = new anchor.BN(1000000);
      const markets = [marketPDA];
      const metadataUri = "https://example.com/new-league";
      const maxParticipants = 100;
      const virtualOnDeposit = new anchor.BN(1000000000);
      const maxLeverage = 20;

      const seedBuffer = Buffer.alloc(8);
      seedBuffer.writeBigInt64LE(BigInt(startTs));

      [leaguePDA] = PublicKey.findProgramAddressSync(
        [Buffer.from("league"), user1.publicKey.toBuffer(), seedBuffer],
        program.programId
      );

      // Initialize participantPDA for position tests
      [participantPDA] = PublicKey.findProgramAddressSync(
        [
          Buffer.from("participant"),
          leaguePDA.toBuffer(),
          user1.publicKey.toBuffer(),
        ],
        program.programId
      );

      const rewardVaultAta = await getAssociatedTokenAddress(
        entryTokenMint,
        leaguePDA,
        true
      );

      await program.methods
        .createLeague(
          new anchor.BN(startTs),
          new anchor.BN(endTs),
          entryAmount,
          markets,
          metadataUri,
          maxParticipants,
          virtualOnDeposit,
          maxLeverage
        )
        .accounts({
          creator: user1.publicKey,
          league: leaguePDA,
          entryTokenMint: entryTokenMint,
          rewardVault: rewardVaultAta,
          systemProgram: SystemProgram.programId,
          tokenProgram: TOKEN_PROGRAM_ID,
          associatedTokenProgram: new PublicKey(
            "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
          ),
        } as any)
        .signers([user1])
        .rpc();

      // start league
      await program.methods
        .startLeague()
        .accounts({
          league: leaguePDA,
          user: user1.publicKey,
        } as any)
        .signers([user1])
        .rpc();

      // join league
      const userTokenAccountInfo = await getOrCreateAssociatedTokenAccount(
        provider.connection,
        user1,
        entryTokenMint,
        user1.publicKey
      );
      const userTokenAccount = userTokenAccountInfo.address;

      await mintTo(
        provider.connection,
        admin,
        entryTokenMint,
        userTokenAccount,
        admin,
        10000000 // 10 tokens
      );

      await program.methods
        .joinLeague(entryAmount)
        .accounts({
          user: user1.publicKey,
          league: leaguePDA,
          participant: participantPDA,
          rewardVault: rewardVaultAta,
          entryTokenMint: entryTokenMint,
          userEntryAta: userTokenAccount,
          vaultEntryAta: rewardVaultAta,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
        } as any)
        .signers([user1])
        .rpc();
    });

    beforeEach(async () => {
      // Calculate PDAs for position tests
      [positionPDA] = PublicKey.findProgramAddressSync(
        [
          Buffer.from("position"),
          leaguePDA.toBuffer(),
          user1.publicKey.toBuffer(),
          marketPDA.toBuffer(),
        ],
        program.programId
      );
    });

    describe("Open Position", () => {
      it("Should open a long position successfully", async () => {
        console.log("üìà Testing long position opening...");

        const direction = { long: {} };
        const size = new anchor.BN(1); // 1 unit (considering 6 decimals)
        const leverage = 5;

        const tx = await program.methods
          .openPosition(direction, size, leverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();

        console.log("‚úÖ Open position tx:", tx);

        // Verify position was created
        const position = await program.account.position.fetch(positionPDA);
        expect(position.league.toString()).to.equal(leaguePDA.toString());
        expect(position.user.toString()).to.equal(user1.publicKey.toString());
        expect(position.market.toString()).to.equal(marketPDA.toString());
        expect(position.direction).to.deep.equal({ long: {} });
        expect(position.size.toString()).to.equal(size.toString());
        expect(position.leverage).to.equal(leverage);
        expect(position.entryPrice.toString()).to.equal("188000000"); // From oracle mock
        expect(position.openedAt.toNumber()).to.be.greaterThan(0);
        expect(position.closedAt.toNumber()).to.equal(0);

        // Verify participant equity was reduced by margin
        const participant = await program.account.participant.fetch(
          participantPDA
        );
        const expectedMargin = position.notional.toNumber() / leverage;
        const expectedEquity = 1000000000 - expectedMargin; // virtual_balance - margin
        expect(participant.equity.toString()).to.equal(
          expectedEquity.toString()
        );

        console.log("‚úÖ Long position opened successfully");
      });

      it("Should open a short position successfully", async () => {
        console.log("üìâ Testing short position opening...");

        const direction = { short: {} };
        const size = new anchor.BN(1); // 1 unit (considering 6 decimals)
        const leverage = 10;

        const tx = await program.methods
          .openPosition(direction, size, leverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();

        console.log("‚úÖ Open short position tx:", tx);

        // Verify position was created
        const position = await program.account.position.fetch(positionPDA);
        expect(position.direction).to.deep.equal({ short: {} });
        expect(position.size.toString()).to.equal(size.toString());
        expect(position.leverage).to.equal(leverage);

        console.log("‚úÖ Short position opened successfully");
      });

      it("Should fail to open position with insufficient margin", async () => {
        console.log("‚ùå Testing insufficient margin failure...");

        const direction = { long: {} };
        const size = new anchor.BN(1000); // Reasonable size
        const leverage = 1; // High leverage

        try {
          await program.methods
            .openPosition(direction, size, leverage)
            .accounts({
              user: user1.publicKey,
              league: leaguePDA,
              market: marketPDA,
              participant: participantPDA,
              position: positionPDA,
              oracleFeed: oracleFeed.publicKey,
              systemProgram: SystemProgram.programId,
            } as any)
            .signers([user1])
            .rpc();

          expect.fail("Should have failed");
        } catch (error) {
          expect(error.message).to.include("Insufficient margin");
          console.log("‚úÖ Correctly failed with insufficient margin");
        }
      });

      it("Should fail to open position with invalid leverage", async () => {
        console.log("‚ùå Testing invalid leverage failure...");

        const direction = { long: {} };
        const size = new anchor.BN(1);
        const leverage = 25; // Exceeds max leverage of 20

        try {
          await program.methods
            .openPosition(direction, size, leverage)
            .accounts({
              user: user1.publicKey,
              league: leaguePDA,
              market: marketPDA,
              participant: participantPDA,
              position: positionPDA,
              oracleFeed: oracleFeed.publicKey,
              systemProgram: SystemProgram.programId,
            } as any)
            .signers([user1])
            .rpc();

          expect.fail("Should have failed");
        } catch (error) {
          expect(error.message).to.include("Invalid leverage");
          console.log("‚úÖ Correctly failed with invalid leverage");
        }
      });

      it("Should fail to open position in non-active league", async () => {
        console.log("‚ùå Testing position opening in non-active league...");

        // Create a new league that's not active
        const newLeagueStartTs = Math.floor(Date.now() / 1000) + 3600;
        const newLeagueEndTs = newLeagueStartTs + 86400;
        const entryAmount = new anchor.BN(1000000);
        const markets = [marketPDA];
        const metadataUri = "https://example.com/new-league";
        const maxParticipants = 100;
        const virtualOnDeposit = new anchor.BN(1000000000);
        const maxLeverage = 20;

        const seedBuffer = Buffer.alloc(8);
        seedBuffer.writeBigInt64LE(BigInt(newLeagueStartTs));

        const [newLeaguePDA] = PublicKey.findProgramAddressSync(
          [Buffer.from("league"), user2.publicKey.toBuffer(), seedBuffer],
          program.programId
        );

        const newRewardVaultPDA = await getAssociatedTokenAddress(
          entryTokenMint,
          newLeaguePDA,
          true
        );

        // Create the league (it will be in Pending status)
        await program.methods
          .createLeague(
            new anchor.BN(newLeagueStartTs),
            new anchor.BN(newLeagueEndTs),
            entryAmount,
            markets,
            metadataUri,
            maxParticipants,
            virtualOnDeposit,
            maxLeverage
          )
          .accounts({
            creator: user2.publicKey,
            league: newLeaguePDA,
            entryTokenMint: entryTokenMint,
            rewardVault: newRewardVaultPDA,
            systemProgram: SystemProgram.programId,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: new PublicKey(
              "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
            ),
          } as any)
          .signers([user2])
          .rpc();

        // Try to open position in non-active league
        const [newParticipantPDA] = PublicKey.findProgramAddressSync(
          [
            Buffer.from("participant"),
            newLeaguePDA.toBuffer(),
            user2.publicKey.toBuffer(),
          ],
          program.programId
        );

        const [newPositionPDA] = PublicKey.findProgramAddressSync(
          [
            Buffer.from("position"),
            newLeaguePDA.toBuffer(),
            user2.publicKey.toBuffer(),
            marketPDA.toBuffer(),
          ],
          program.programId
        );

        try {
          await program.methods
            .openPosition({ long: {} }, new anchor.BN(1000000), 5)
            .accounts({
              user: user2.publicKey,
              league: newLeaguePDA,
              market: marketPDA,
              participant: newParticipantPDA,
              position: newPositionPDA,
              oracleFeed: oracleFeed.publicKey,
              systemProgram: SystemProgram.programId,
            } as any)
            .signers([user2])
            .rpc();

          expect.fail("Should have failed");
        } catch (error) {
          console.log(error.message);
          expect(error.message).to.include("League is not active");
          console.log(
            "‚úÖ Correctly failed to open position in non-active league"
          );
        }
      });

      it("Should fail to open position when position already exists", async () => {
        console.log("‚ùå Testing position opening when position already exists...");

        // First open a position
        const direction = { long: {} };
        const size = new anchor.BN(1);
        const leverage = 5;

        await program.methods
          .openPosition(direction, size, leverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();

        // Try to open another position in the same market
        try {
          await program.methods
            .openPosition(direction, size, leverage)
            .accounts({
              user: user1.publicKey,
              league: leaguePDA,
              market: marketPDA,
              participant: participantPDA,
              position: positionPDA,
              oracleFeed: oracleFeed.publicKey,
              systemProgram: SystemProgram.programId,
            } as any)
            .signers([user1])
            .rpc();

          expect.fail("Should have failed to open position when position already exists");
        } catch (error) {
          expect(error.message).to.include("PositionAlreadyExists");
          console.log("‚úÖ Correctly failed to open position when position already exists");
        }
      });
    });

    describe("Update Position", () => {
      beforeEach(async () => {
        // Open a position first for update tests
        const direction = { long: {} };
        const size = new anchor.BN(1);
        const leverage = 5;

        await program.methods
          .openPosition(direction, size, leverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();
      });

      it("Should update position with same direction (increase size)", async () => {
        console.log("üìà Testing position update with same direction...");

        const direction = { long: {} };
        const additionalSize = new anchor.BN(2);
        const leverage = 5;

        const initialPosition = await program.account.position.fetch(positionPDA);
        const initialSize = initialPosition.size;

        const tx = await program.methods
          .updatePosition(direction, additionalSize, leverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
          } as any)
          .signers([user1])
          .rpc();

        console.log("‚úÖ Update position tx:", tx);

        // Verify position was updated
        const updatedPosition = await program.account.position.fetch(positionPDA);
        expect(updatedPosition.size.toString()).to.equal(
          initialSize.add(additionalSize).toString()
        );
        expect(updatedPosition.direction).to.deep.equal({ long: {} });

        console.log("‚úÖ Position updated successfully with same direction");
      });

      it("Should update position with different direction (decrease size)", async () => {
        console.log("üìâ Testing position update with different direction...");

        const direction = { short: {} };
        const size = new anchor.BN(1);
        const leverage = 5;

        const initialParticipant = await program.account.participant.fetch(participantPDA);
        const initialEquity = initialParticipant.equity;

        const tx = await program.methods
          .updatePosition(direction, size, leverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
          } as any)
          .signers([user1])
          .rpc();

        console.log("‚úÖ Update position tx:", tx);

        // Verify position was updated
        const updatedPosition = await program.account.position.fetch(positionPDA);
        expect(updatedPosition.direction).to.deep.equal({ short: {} });
        expect(updatedPosition.size.toString()).to.equal("0"); // Should be 0 after complete reversal

        // Verify participant equity was updated with PnL
        const finalParticipant = await program.account.participant.fetch(participantPDA);
        expect(finalParticipant.equity.toString()).to.not.equal(initialEquity.toString());

        console.log("‚úÖ Position updated successfully with different direction");
      });

      it("Should fail to update position with invalid sequence", async () => {
        console.log("‚ùå Testing position update with invalid sequence...");

        // Close the position first to increment sequence
        await program.methods
          .closePosition()
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
          } as any)
          .signers([user1])
          .rpc();

        // Try to update the closed position
        try {
          await program.methods
            .updatePosition({ long: {} }, new anchor.BN(1), 5)
            .accounts({
              user: user1.publicKey,
              league: leaguePDA,
              market: marketPDA,
              participant: participantPDA,
              position: positionPDA,
              oracleFeed: oracleFeed.publicKey,
            } as any)
            .signers([user1])
            .rpc();

          expect.fail("Should have failed to update position with invalid sequence");
        } catch (error) {
          expect(error.message).to.include("InvalidPosition");
          console.log("‚úÖ Correctly failed to update position with invalid sequence");
        }
      });
    });

    describe("Close Position", () => {
      beforeEach(async () => {
        // Open a position first for close tests
        const direction = { long: {} };
        const size = new anchor.BN(1);
        const leverage = 5;

        await program.methods
          .openPosition(direction, size, leverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();
      });

      it("Should close a long position successfully", async () => {
        console.log("üîí Testing long position closing...");

        // Get initial participant state
        const initialParticipant = await program.account.participant.fetch(
          participantPDA
        );
        const initialEquity = initialParticipant.equity;

        const tx = await program.methods
          .closePosition()
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
          } as any)
          .signers([user1])
          .rpc();

        console.log("‚úÖ Close position tx:", tx);

        // Verify position was closed
        const position = await program.account.position.fetch(positionPDA);
        expect(position.closedAt.toNumber()).to.be.greaterThan(0);
        expect(position.closedPrice.toString()).to.equal("188000000"); // From oracle mock
        expect(position.closedNotional.toString()).to.equal(
          position.notional.toString()
        );
        expect(position.closedPnl.toString()).to.equal("0"); // Same price = no PnL

        // Verify participant equity was updated
        const finalParticipant = await program.account.participant.fetch(
          participantPDA
        );
        const margin = position.notional.toNumber() / position.leverage;
        const expectedEquity = initialEquity.toNumber() + margin; // margin returned + PnL
        expect(finalParticipant.equity.toString()).to.equal(
          expectedEquity.toString()
        );

        console.log("‚úÖ Long position closed successfully");
      });

      it("Should close a short position with PnL calculation", async () => {
        console.log("üîí Testing short position closing with PnL...");

        // First open a short position
        const shortDirection = { short: {} };
        const shortSize = new anchor.BN(500000);
        const shortLeverage = 10;

        const [shortPositionPDA] = PublicKey.findProgramAddressSync(
          [
            Buffer.from("position"),
            leaguePDA.toBuffer(),
            user1.publicKey.toBuffer(),
            marketPDA.toBuffer(),
          ],
          program.programId
        );

        await program.methods
          .openPosition(shortDirection, shortSize, shortLeverage)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: shortPositionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();

        // Get initial participant state
        const initialParticipant = await program.account.participant.fetch(
          participantPDA
        );
        const initialEquity = initialParticipant.equity;

        // Close the short position
        const tx = await program.methods
          .closePosition()
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            participant: participantPDA,
            position: shortPositionPDA,
            oracleFeed: oracleFeed.publicKey,
          } as any)
          .signers([user1])
          .rpc();

        console.log("‚úÖ Close short position tx:", tx);

        // Verify position was closed
        const position = await program.account.position.fetch(shortPositionPDA);
        expect(position.closedAt.toNumber()).to.be.greaterThan(0);
        expect(position.direction).to.deep.equal({ short: {} });

        // For short position with same entry/close price, PnL should be 0
        expect(position.closedPnl.toString()).to.equal("0");

        console.log("‚úÖ Short position closed successfully");
      });

      it("Should fail to close position twice", async () => {
        console.log("‚ùå Testing double close failure...");

        // Try to close the same position again
        try {
          await program.methods
            .closePosition()
            .accounts({
              user: user1.publicKey,
              league: leaguePDA,
              participant: participantPDA,
              position: positionPDA,
              oracleFeed: oracleFeed.publicKey,
            } as any)
            .signers([user1])
            .rpc();

          expect.fail("Should have failed");
        } catch (error) {
          // The position account should be closed, so this should fail
          expect(error.message).to.include("Account does not exist");
          console.log("‚úÖ Correctly failed to close position twice");
        }
      });
    });

    describe("Position PnL Calculations", () => {
      it("Should calculate PnL correctly for profitable long position", async () => {
        console.log("üí∞ Testing PnL calculation for profitable long...");

        // This test would require mocking different oracle prices
        // For now, we'll test the basic structure
        const direction = { long: {} };
        const size = new anchor.BN(1);
        const leverage = 5;

        const [testPositionPDA] = PublicKey.findProgramAddressSync(
          [
            Buffer.from("position"),
            leaguePDA.toBuffer(),
            user2.publicKey.toBuffer(),
            marketPDA.toBuffer(),
          ],
          program.programId
        );

        const [testParticipantPDA] = PublicKey.findProgramAddressSync(
          [
            Buffer.from("participant"),
            leaguePDA.toBuffer(),
            user2.publicKey.toBuffer(),
          ],
          program.programId
        );

        // Create participant first
        const amount = new anchor.BN(1000000);
        const userTokenAccountInfo = await getOrCreateAssociatedTokenAccount(
          provider.connection,
          user2,
          entryTokenMint,
          user2.publicKey
        );
        const userTokenAccount = userTokenAccountInfo.address;

        await mintTo(
          provider.connection,
          admin,
          entryTokenMint,
          userTokenAccount,
          admin,
          10000000
        );

        const rewardVaultAta = await getAssociatedTokenAddress(
          entryTokenMint,
          leaguePDA,
          true
        );

        await program.methods
          .joinLeague(amount)
          .accounts({
            user: user2.publicKey,
            league: leaguePDA,
            participant: testParticipantPDA,
            rewardVault: rewardVaultAta,
            entryTokenMint: entryTokenMint,
            userEntryAta: userTokenAccount,
            vaultEntryAta: rewardVaultAta,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user2])
          .rpc();

        // Open position
        await program.methods
          .openPosition(direction, size, leverage)
          .accounts({
            user: user2.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: testParticipantPDA,
            position: testPositionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user2])
          .rpc();

        // Close position (with same price, so PnL = 0)
        await program.methods
          .closePosition()
          .accounts({
            user: user2.publicKey,
            league: leaguePDA,
            participant: testParticipantPDA,
            position: testPositionPDA,
            oracleFeed: oracleFeed.publicKey,
          } as any)
          .signers([user2])
          .rpc();

        // Verify PnL calculation
        const position = await program.account.position.fetch(testPositionPDA);
        expect(position.closedPnl.toString()).to.equal("0"); // Same price = no PnL

        console.log("‚úÖ PnL calculation verified");
      });
    });

    describe("Position Sequence Management", () => {
      it("Should allow new position after closing previous one", async () => {
        console.log("üîÑ Testing position sequence management...");

        // Open first position
        const direction1 = { long: {} };
        const size1 = new anchor.BN(1);
        const leverage1 = 5;

        await program.methods
          .openPosition(direction1, size1, leverage1)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();

        // Verify first position
        const firstPosition = await program.account.position.fetch(positionPDA);
        const firstSeqNum = firstPosition.seqNum;
        const participant = await program.account.participant.fetch(participantPDA);
        expect(participant.currentPositionSeq.toString()).to.equal(firstSeqNum.toString());

        // Close position
        await program.methods
          .closePosition()
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
          } as any)
          .signers([user1])
          .rpc();

        // Verify sequence was incremented
        const participantAfterClose = await program.account.participant.fetch(participantPDA);
        expect(participantAfterClose.currentPositionSeq.toString()).to.equal(
          (firstSeqNum.toNumber() + 1).toString()
        );

        // Open new position
        const direction2 = { short: {} };
        const size2 = new anchor.BN(2);
        const leverage2 = 10;

        await program.methods
          .openPosition(direction2, size2, leverage2)
          .accounts({
            user: user1.publicKey,
            league: leaguePDA,
            market: marketPDA,
            participant: participantPDA,
            position: positionPDA,
            oracleFeed: oracleFeed.publicKey,
            systemProgram: SystemProgram.programId,
          } as any)
          .signers([user1])
          .rpc();

        // Verify new position has correct sequence
        const secondPosition = await program.account.position.fetch(positionPDA);
        expect(secondPosition.seqNum.toString()).to.equal(
          participantAfterClose.currentPositionSeq.toString()
        );
        expect(secondPosition.direction).to.deep.equal({ short: {} });
        expect(secondPosition.size.toString()).to.equal(size2.toString());

        console.log("‚úÖ Position sequence management working correctly");
      });

      it("Should track sequence numbers correctly across multiple positions", async () => {
        console.log("üî¢ Testing sequence number tracking...");

        const initialParticipant = await program.account.participant.fetch(participantPDA);
        const initialSeq = initialParticipant.currentPositionSeq;

        // Open and close multiple positions
        for (let i = 0; i < 3; i++) {
          const direction = i % 2 === 0 ? { long: {} } : { short: {} };
          const size = new anchor.BN(1);
          const leverage = 5;

          // Open position
          await program.methods
            .openPosition(direction, size, leverage)
            .accounts({
              user: user1.publicKey,
              league: leaguePDA,
              market: marketPDA,
              participant: participantPDA,
              position: positionPDA,
              oracleFeed: oracleFeed.publicKey,
              systemProgram: SystemProgram.programId,
            } as any)
            .signers([user1])
            .rpc();

          // Verify sequence
          const position = await program.account.position.fetch(positionPDA);
          const participant = await program.account.participant.fetch(participantPDA);
          expect(position.seqNum.toString()).to.equal(participant.currentPositionSeq.toString());

          // Close position
          await program.methods
            .closePosition()
            .accounts({
              user: user1.publicKey,
              league: leaguePDA,
              participant: participantPDA,
              position: positionPDA,
              oracleFeed: oracleFeed.publicKey,
            } as any)
            .signers([user1])
            .rpc();
        }

        // Verify final sequence
        const finalParticipant = await program.account.participant.fetch(participantPDA);
        expect(finalParticipant.currentPositionSeq.toString()).to.equal(
          (initialSeq.toNumber() + 3).toString()
        );

        console.log("‚úÖ Sequence number tracking working correctly");
      });
    });
  });
});
